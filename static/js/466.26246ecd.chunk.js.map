{"version":3,"file":"static/js/466.26246ecd.chunk.js","mappings":"0MAEaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAE/CC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAU,EAEpDC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAI5CC,GAAyBC,EAAAA,EAAAA,IACpC,CAACT,EAHyB,SAAAC,GAAK,OAAIA,EAAMS,OAAOA,MAAO,IAIvD,SAACR,EAAUQ,GACT,OAAOR,EAASQ,QAAO,SAAAC,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,cAAc,GAE7D,I,mBCdWE,EAAoBC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uGAO7BC,EAAWH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gFAKpBG,EAASL,EAAAA,GAAAA,OAAaM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,iS,uCCRtBK,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAmBC,EAAAA,EAAAA,IAAYnB,GAIrC,OACEoB,EAAAA,EAAAA,MAACb,EAAiB,CAAAc,SAAA,EAChBC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAAAF,UACLC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,oBAERH,EAAiBM,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAItB,EAAIqB,EAAJrB,KAAMuB,EAAMF,EAANE,OAAM,OACvCP,EAAAA,EAAAA,MAACT,EAAQ,CAAAU,SAAA,EACPD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CACGjB,EAAK,KAAGuB,MAEXL,EAAAA,EAAAA,KAACT,EAAM,CAACe,KAAK,SAASC,QAAS,kBAZlB,SAAAH,GAAE,OAAIV,GAASc,EAAAA,EAAAA,IAAcJ,GAAK,CAYVK,CAAaL,EAAG,EAACL,SAAC,aAJ1CK,EAOJ,MAInB,EC5BaM,EAAaxB,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yG,UCExBuB,EAAS,WACpB,IAAMjB,GAAWC,EAAAA,EAAAA,MAEjB,OACEG,EAAAA,EAAAA,MAACY,EAAU,CAAAX,SAAA,EACTC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,4BACPC,EAAAA,EAAAA,KAAA,SACEM,KAAK,OACLxB,KAAK,OACL8B,SAAU,SAAAC,GAAK,OAAInB,GAASoB,EAAAA,EAAAA,IAAUD,EAAME,OAAOC,OAAO,MAIlE,E,UCaA,EAnBiB,WACf,IAAM5C,GAAWyB,EAAAA,EAAAA,IAAY3B,GACvBK,GAAYsB,EAAAA,EAAAA,IAAYvB,GACxBG,GAAQoB,EAAAA,EAAAA,IAAYrB,GACpBkB,GAAWC,EAAAA,EAAAA,MAMjB,OAJAsB,EAAAA,EAAAA,YAAU,WACRvB,GAASwB,EAAAA,EAAAA,MACX,GAAG,CAACxB,KAGFI,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAApB,SAAA,EACEC,EAAAA,EAAAA,KAACW,EAAM,IACNpC,IAAcE,IAASuB,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2BAC1B3B,GAAW4B,EAAAA,EAAAA,KAACP,EAAW,KAAMO,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kBAGvC,C","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  background-color: #fff;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  padding: 4px;\n`;\nexport const Button = styled.button`\n  margin-top: 8px;\n  padding: 4px;\n  background-color: #fff;\n  border-radius: 8px;\n  border: 1px solid darkgrey;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    transform: scale(1.05);\n    background-color: #ff99ff;\n  }\n`;\n","import { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { Button, ContactListStyled, ListItem } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Helmet } from 'react-helmet';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <ContactListStyled>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <p>\n            {name}: {number}\n          </p>\n          <Button type=\"button\" onClick={() => handleDelete(id)}>\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n    </ContactListStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 8px;\n  margin-top: 21px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterForm } from './Filter.styled';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterForm>\n      <label>Find contacts by name:</label>\n      <input\n        type=\"text\"\n        name=\"find\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </FilterForm>\n  );\n};\n","import { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      {contacts ? <ContactList /> : <p>No contacts</p>}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactListStyled","styled","_templateObject","_taggedTemplateLiteral","ListItem","_templateObject2","Button","_templateObject3","ContactList","dispatch","useDispatch","filteredContacts","useSelector","_jsxs","children","_jsx","Helmet","map","_ref","id","number","type","onClick","deleteContact","handleDelete","FilterForm","Filter","onChange","event","setFilter","target","value","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}