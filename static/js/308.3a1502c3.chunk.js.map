{"version":3,"file":"static/js/308.3a1502c3.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Home/Home.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SectionWrapper = styled.section`\n  max-width: 370px;\n  margin: 0 auto;\n  margin: 32px auto;\n  border: 1px solid lightgrey;\n  border-radius: 8px;\n  padding: 20px;\n  background-color: rgba(255, 99, 71, 0.1);\n`;\n\nexport const SectionTitle = styled.h2`\n  font-size: 30px;\n  font-weight: 700;\n`;\n","import { SectionTitle, SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrapper>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, ErrorMessage } from 'formik';\n\nexport const FormWrapper = styled.div`\n  display: flex;\n  align-items: center;\nbackground-color: rgba(255, 99, 71, 0.01)\n  height: auto;\n  width: auto;\n  margin-bottom: 10px;\n  padding: 20px;\n  /* border: 1px solid darkgrey; */\n`;\n\nexport const FormStyled = styled(Form)``;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  display: block;\n  padding: 4px 0;\n`;\n\nexport const FieldWrapper = styled.div`\n  height: 72px;\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  color: red;\n`;\n\nexport const AddButton = styled.button`\n  margin-top: 8px;\n  padding: 4px;\n  background-color: #fff;\n  border-radius: 8px;\n  border: 1px solid darkgrey;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    transform: scale(1.05);\n    background-color: #ff99ff;\n  }\n`;\n","import { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  FormWrapper,\n  FormStyled,\n  Label,\n  FieldWrapper,\n  ErrorMessageStyled,\n  AddButton,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(9, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === newContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <FormWrapper>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        <FormStyled>\n          <FieldWrapper>\n            <Label htmlFor=\"name\">Name</Label>\n            <Field id=\"name\" name=\"name\" placeholder=\"Jane\" />\n            <ErrorMessageStyled component=\"div\" name=\"name\" />\n          </FieldWrapper>\n\n          <FieldWrapper>\n            <Label htmlFor=\"number\">Number</Label>\n            <Field id=\"number\" name=\"number\" placeholder=\"123-45-67\" />\n            <ErrorMessageStyled component=\"div\" name=\"number\" />\n          </FieldWrapper>\n\n          <AddButton type=\"submit\">Add contact</AddButton>\n        </FormStyled>\n      </Formik>\n    </FormWrapper>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Section } from 'components/Section/Section';\n\nconst Home = () => {\n  return (\n    <div>\n      <h1>\n        Hello! Here you can store your contacts!{' '}\n        <span role=\"img\" aria-label=\"Greeting icon\">\n          üíÅ‚Äç‚ôÄÔ∏èüßè‚Äç‚ôÄÔ∏èüìãüñç\n        </span>\n      </h1>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n    </div>\n  );\n};\n\nexport default Home;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["SectionWrapper","styled","_templateObject","_taggedTemplateLiteral","SectionTitle","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","FormWrapper","FormStyled","Form","Label","_templateObject3","FieldWrapper","_templateObject4","ErrorMessageStyled","ErrorMessage","_templateObject5","AddButton","_templateObject6","contactSchema","Yup","shape","name","min","required","number","max","matches","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","Formik","initialValues","validationSchema","onSubmit","newContact","actions","existingName","find","contact","existingNumber","alert","addContact","resetForm","htmlFor","Field","id","placeholder","component","type","role","state","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","toLowerCase","includes"],"sourceRoot":""}