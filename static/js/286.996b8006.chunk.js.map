{"version":3,"file":"static/js/286.996b8006.chunk.js","mappings":"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","sources":["components/ContactForm.js","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/button/src/button-group.tsx","components/ContactList.js","components/Filter.js","pages/Contacts.js","redux/contacts/selectors.js"],"sourcesContent":["import { Formik, Field, ErrorMessage } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === newContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Box maxW=\"50%\" mx=\"auto\" p={5}>\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Create A Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleSubmit, errors }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack autoComplete=\"true\" spacing={5} m=\"auto\" align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\" color=\"brand.900\">\n                  Name\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name:\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel htmlFor=\"phone\" color=\"brand.900\">\n                  Phone number\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"number\"\n                  name=\"number\"\n                  placeholder=\"Phone: 123-45-67\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </FormControl>\n              <Button\n                type=\"submit\"\n                variant=\"solid\"\n                bgColor=\"brand.100\"\n                _hover={{ bgColor: 'brand.700', color: '#fff' }}\n                mx=\"auto\"\n                color=\"brand.900\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonGroupContext, ButtonGroupProvider } from \"./button-context\"\nimport { ButtonGroupOptions } from \"./button-types\"\n\nexport interface ButtonGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Button\">,\n    ButtonGroupOptions {}\n\nconst attachedStyles: Record<string, SystemStyleObject> = {\n  horizontal: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 },\n  },\n  vertical: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderBottomRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderTopRadius: 0 },\n  },\n}\n\nconst gapStyles = {\n  horizontal: (spacing: any): SystemStyleObject => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing },\n  }),\n  vertical: (spacing: any): SystemStyleObject => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginTop: spacing },\n  }),\n}\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">(\n  function ButtonGroup(props, ref) {\n    const {\n      size,\n      colorScheme,\n      variant,\n      className,\n      spacing = \"0.5rem\",\n      isAttached,\n      isDisabled,\n      orientation = \"horizontal\",\n      ...rest\n    } = props\n\n    const _className = cx(\"chakra-button__group\", className)\n\n    const context: ButtonGroupContext = useMemo(\n      () => ({ size, colorScheme, variant, isDisabled }),\n      [size, colorScheme, variant, isDisabled],\n    )\n\n    let groupStyles: SystemStyleObject = {\n      display: \"inline-flex\",\n      ...(isAttached\n        ? attachedStyles[orientation]\n        : gapStyles[orientation](spacing)),\n    }\n\n    const isVertical = orientation === \"vertical\"\n\n    return (\n      <ButtonGroupProvider value={context}>\n        <chakra.div\n          ref={ref}\n          role=\"group\"\n          __css={groupStyles}\n          className={_className}\n          data-attached={isAttached ? \"\" : undefined}\n          data-orientation={orientation}\n          flexDir={isVertical ? \"column\" : undefined}\n          {...rest}\n        />\n      </ButtonGroupProvider>\n    )\n  },\n)\n\nButtonGroup.displayName = \"ButtonGroup\"\n","import { selectFilteredContacts } from 'redux/contacts/selectors';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, updateContact } from 'redux/contacts/operations';\n\nimport {\n  Heading,\n  UnorderedList,\n  ListItem,\n  Button,\n  Text,\n  ButtonGroup,\n} from '@chakra-ui/react';\nimport { NavLink } from 'react-router-dom';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleUpdate = id => dispatch(updateContact(id));\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <UnorderedList\n      display=\"flex\"\n      flexDirection=\"column\"\n      mt={5}\n      px={5}\n      maxW=\"50%\"\n      mx=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Your Contacts\n      </Heading>\n\n      {filteredContacts.map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          p={1}\n          listStyle=\"none\"\n        >\n          <Text fontSize={18} fontWeight=\"bold\" color=\"brand.900\">\n            {name}: {number}\n          </Text>\n          <ButtonGroup gap=\"4\">\n            <Button\n              as={NavLink}\n              to=\"/contacts/{contactId}\"\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              color=\"brand.900\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              type=\"button\"\n              onClick={() => handleUpdate(id)}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              color=\"brand.900\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              type=\"button\"\n              onClick={() => handleDelete(id)}\n            >\n              Delete\n            </Button>\n          </ButtonGroup>\n        </ListItem>\n      ))}\n    </UnorderedList>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Container, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container p={5} maxW=\"50%\" m=\"auto\">\n      <Input\n        placeholder=\"Find contacts by name:\"\n        _placeholder={{ color: 'brand.300' }}\n        size=\"lg\"\n        variant=\"outline\"\n        focusBorderColor=\"brand.600\"\n        type=\"text\"\n        name=\"find\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </Container>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && <p fontSize={20}>Request in progress...</p>}\n      {contacts ? <ContactList /> : <p fontSize={20}>No contacts</p>}\n    </>\n  );\n};\n\nexport default Contacts;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["contactSchema","Yup","shape","name","min","required","number","max","matches","ContactForm","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsxs","Box","maxW","mx","p","children","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","validationSchema","onSubmit","newContact","actions","existingName","find","contact","existingNumber","alert","addContact","resetForm","_ref","handleSubmit","errors","VStack","autoComplete","spacing","m","align","FormControl","FormLabel","htmlFor","Field","as","Input","id","placeholder","_placeholder","size","variant","focusBorderColor","ErrorMessage","component","Button","type","bgColor","_hover","_createContext","createContext","errorMessage","_createContext2","_slicedToArray","ListStylesProvider","useListStyles","List","forwardRef","props","ref","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","_omitThemingProps$sty","styleType","stylePosition","rest","_objectWithoutProperties","_excluded","validChildren","getValidChildren","spacingStyle","_defineProperty","mt","jsx","value","chakra","_objectSpread","listStyleType","listStylePosition","role","__css","container","displayName","_excluded2","marginStart","UnorderedList","_excluded3","ListItem","item","Icon","icon","attachedStyles","horizontal","borderEndRadius","borderRadius","borderStartRadius","vertical","borderBottomRadius","borderTopRadius","gapStyles","marginTop","ButtonGroup","colorScheme","className","_props$spacing","isAttached","isDisabled","_props$orientation","orientation","_className","cx","context","useMemo","groupStyles","display","isVertical","ButtonGroupProvider","flexDir","ContactList","filteredContacts","selectFilteredContacts","flexDirection","px","map","justifyContent","listStyle","Text","fontWeight","gap","NavLink","to","onClick","updateContact","handleUpdate","deleteContact","handleDelete","Filter","Container","onChange","event","setFilter","target","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","_Fragment","state","items","createSelector","filter","toLowerCase","includes"],"sourceRoot":""}