{"version":3,"file":"static/js/758.10977f28.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/form-control/src/form-error.tsx","components/UpdateContact.js","pages/ContactDetails.js","redux/contacts/selectors.js"],"sourcesContent":["import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n","import { Field, Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { updateContact } from 'redux/contacts/operations';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const UpdateContact = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (editedContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === editedContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === editedContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(updateContact(editedContact));\n    actions.resetForm();\n  };\n  return (\n    <Box maxW=\"50%\" mx=\"auto\">\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Update The Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: updateContact.name,\n          number: updateContact.number,\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleSubmit, errors }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack autoComplete=\"true\" spacing={5} m=\"auto\" align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\" color=\"brand.900\">\n                  Name\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name:\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel htmlFor=\"phone\" color=\"brand.900\">\n                  Phone number\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"number\"\n                  name=\"number\"\n                  placeholder=\"Phone: 123-45-67\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <FormErrorMessage>{errors.number}</FormErrorMessage>\n              </FormControl>\n              <Button\n                type=\"submit\"\n                variant=\"solid\"\n                bgColor=\"brand.100\"\n                _hover={{ bgColor: 'brand.700', color: '#fff' }}\n                mx=\"auto\"\n                color=\"brand.900\"\n              >\n                Update\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","import { UpdateContact } from 'components/UpdateContact';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\n\nconst ContactDetails = () => {\n  const dispatch = useDispatch();\n\n  useEffect(\n    id => {\n      dispatch(updateContact(id));\n    },\n    [dispatch]\n  );\n\n  return (\n    <>\n      <UpdateContact />\n    </>\n  );\n};\nexport default ContactDetails;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["_createContext","createContext","name","errorMessage","_createContext2","_slicedToArray","FormErrorStylesProvider","useFormErrorStyles","FormErrorMessage","forwardRef","props","ref","styles","useMultiStyleConfig","ownProps","omitThemingProps","field","useFormControlContext","isInvalid","jsx","value","children","chakra","_objectSpread","getErrorMessageProps","className","cx","__css","display","alignItems","text","displayName","_className","Icon","icon","fill","d","contactSchema","Yup","shape","min","required","number","max","matches","UpdateContact","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsxs","Box","maxW","mx","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","updateContact","validationSchema","onSubmit","editedContact","actions","existingName","find","contact","existingNumber","alert","resetForm","_ref","handleSubmit","errors","VStack","autoComplete","spacing","m","align","FormControl","FormLabel","htmlFor","Field","as","Input","id","placeholder","_placeholder","size","variant","focusBorderColor","Button","type","bgColor","_hover","useEffect","_Fragment","state","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","toLowerCase","includes"],"sourceRoot":""}