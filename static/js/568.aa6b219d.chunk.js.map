{"version":3,"file":"static/js/568.aa6b219d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactFormStyled.jsx","components/ContactForm/ContactForm.js","components/Modal.js","components/ContactListItem.js","components/ContactList.js","components/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nimport { Form, ErrorMessage } from 'formik';\n\n// export const FormWrapper = styled.div`\n//   display: flex;\n//   align-items: center;\n// background-color: rgba(255, 99, 71, 0.01)\n//   height: auto;\n//   width: auto;\n//   margin-bottom: 10px;\n//   padding: 20px;\n//   /* border: 1px solid darkgrey; */\n// `;\n\nexport const FormStyled = styled(Form)``;\n\nexport const Label = styled.label`\n  font-size: 20px;\n  display: block;\n  padding: 4px 0;\n  color: ;\n`;\n\nexport const FieldWrapper = styled.div`\n  height: 72px;\n`;\n\nexport const ErrorMessageStyled = styled(ErrorMessage)`\n  color: red;\n  font-weight: bold;\n`;\n\nexport const AddButton = styled.button`\n  margin-top: 8px;\n  padding: 4px;\n  background-color: #fed7e2;\n  color: #521b41;\n  border-radius: 4px;\n  cursor: pointer;\n\n  &:hover {\n    box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n    transform: scale(1.05);\n    background-color: #97266d;\n    color: #fff;\n  }\n`;\n","import { Formik, Field } from 'formik';\nimport { Box, Heading } from '@chakra-ui/react';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport {\n  AddButton,\n  ErrorMessageStyled,\n  FieldWrapper,\n  FormStyled,\n  Label,\n} from './ContactFormStyled';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string()\n    .required('Please provide the name')\n    .min(2, 'Please give 2 characters long!')\n    .max(15, 'The name is too long! 15 ch are allowed'),\n  number: Yup.string()\n    .required('The field cannot be empty')\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === newContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Box maxW=\"50%\" mx=\"auto\" p={5}>\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Create A Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        <FormStyled>\n          <FieldWrapper>\n            <Label htmlFor=\"name\">Name</Label>\n            <Field id=\"name\" name=\"name\" placeholder=\"Jane\" />\n            <ErrorMessageStyled component=\"div\" name=\"name\" />\n          </FieldWrapper>\n\n          <FieldWrapper>\n            <Label htmlFor=\"number\">Number</Label>\n            <Field id=\"number\" name=\"number\" placeholder=\"123-45-67\" />\n            <ErrorMessageStyled component=\"div\" name=\"number\" />\n          </FieldWrapper>\n\n          <AddButton type=\"submit\">Add contact</AddButton>\n        </FormStyled>\n      </Formik>\n    </Box>\n  );\n};\n","import {\n  Button,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n} from '@chakra-ui/react';\nimport { Field, Formik } from 'formik';\nimport React from 'react';\nimport { createPortal } from 'react-dom';\nimport * as Yup from 'yup';\nimport { updateContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport {\n  AddButton,\n  ErrorMessageStyled,\n  FieldWrapper,\n  FormStyled,\n  Label,\n} from './ContactForm/ContactFormStyled';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ModalWindow = ({ isOpen, name, number, onClose, id }) => {\n  const dispatch = useDispatch();\n\n  const handleUpdate = (editedContact, actions) => {\n    dispatch(updateContact({ ...editedContact, id })).then(() => {\n      onClose();\n    });\n    actions.resetForm();\n  };\n\n  const initialRef = React.useRef(null);\n  const finalRef = React.useRef(null);\n\n  return createPortal(\n    <Modal\n      initialFocusRef={initialRef}\n      finalFocusRef={finalRef}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <ModalOverlay />\n\n      <ModalContent>\n        <ModalHeader>Update your contact</ModalHeader>\n\n        <ModalCloseButton />\n\n        <ModalBody pb={6}>\n          <Formik\n            initialValues={{\n              name,\n              number,\n            }}\n            validationSchema={contactSchema}\n            onSubmit={handleUpdate}\n          >\n            <FormStyled>\n              <FieldWrapper>\n                <Label htmlFor=\"name\">Name</Label>\n                <Field id=\"name\" name=\"name\" placeholder=\"Jane\" />\n                <ErrorMessageStyled component=\"div\" name=\"name\" />\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <Label htmlFor=\"number\">Number</Label>\n                <Field id=\"number\" name=\"number\" placeholder=\"123-45-67\" />\n                <ErrorMessageStyled component=\"div\" name=\"number\" />\n              </FieldWrapper>\n\n              <AddButton type=\"submit\">Update contact</AddButton>\n            </FormStyled>\n          </Formik>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            onClick={() => {\n              onClose();\n            }}\n            variant=\"solid\"\n            bgColor=\"brand.100\"\n            _hover={{ bgColor: 'brand.700', color: '#fff' }}\n            mx=\"auto\"\n            color=\"brand.900\"\n            mr={3}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>,\n\n    modalRoot\n  );\n};\n","import { Button, HStack, ListItem, Text } from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { ModalWindow } from './Modal';\nimport { useState } from 'react';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(deleteContact(id));\n  const toggleModal = () => setIsOpen(prev => !prev);\n  return (\n    <ListItem key={id} display=\"flex\" justifyContent=\"space-between\" p={1}>\n      <Text fontSize={18} fontWeight=\"bold\" color=\"brand.900\">\n        {name}: {number}\n      </Text>\n      <HStack gap={1}>\n        <Button\n          variant=\"solid\"\n          bgColor=\"brand.100\"\n          color=\"brand.900\"\n          _hover={{ bgColor: 'brand.700', color: '#fff' }}\n          type=\"button\"\n          onClick={toggleModal}\n        >\n          Edit\n        </Button>\n        <Button\n          variant=\"solid\"\n          bgColor=\"brand.100\"\n          color=\"brand.900\"\n          _hover={{ bgColor: 'brand.700', color: '#fff' }}\n          type=\"button\"\n          onClick={() => handleDelete(id)}\n        >\n          Delete\n        </Button>\n      </HStack>\n      {isOpen && (\n        <ModalWindow\n          isOpen={isOpen}\n          name={name}\n          number={number}\n          id={id}\n          onClose={toggleModal}\n        />\n      )}\n    </ListItem>\n  );\n};\n","import { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux';\n\nimport { Heading, UnorderedList } from '@chakra-ui/react';\n\nimport { ContactListItem } from './ContactListItem';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <UnorderedList\n      display=\"flex\"\n      flexDirection=\"column\"\n      mt={5}\n      px={5}\n      maxW=\"50%\"\n      mx=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Your Contacts\n      </Heading>\n\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem id={id} name={name} number={number} />\n      ))}\n    </UnorderedList>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Container, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container p={5} maxW=\"50%\" m=\"auto\">\n      <Input\n        placeholder=\"Find contacts by name:\"\n        _placeholder={{ color: 'brand.300' }}\n        size=\"lg\"\n        variant=\"outline\"\n        focusBorderColor=\"brand.600\"\n        type=\"text\"\n        name=\"find\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </Container>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && (\n        <b fontSize={20} color=\"brand.900\">\n          Request in progress...\n        </b>\n      )}\n      {contacts ? (\n        <ContactList />\n      ) : (\n        <b fontSize={20} color=\"brand.900\">\n          No contacts\n        </b>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","FormStyled","styled","Form","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","FieldWrapper","_templateObject3","ErrorMessageStyled","ErrorMessage","_templateObject4","AddButton","_templateObject5","contactSchema","Yup","shape","required","min","max","number","matches","ContactForm","useSelector","dispatch","useDispatch","_jsxs","Box","maxW","mx","p","children","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","validationSchema","onSubmit","newContact","actions","existingName","find","existingNumber","alert","addContact","resetForm","htmlFor","Field","id","placeholder","component","type","modalRoot","document","querySelector","ModalWindow","_ref","isOpen","onClose","initialRef","React","finalRef","createPortal","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","editedContact","updateContact","_objectSpread","then","ModalFooter","Button","onClick","variant","bgColor","_hover","mr","ContactListItem","_useState","useState","_useState2","_slicedToArray","setIsOpen","toggleModal","prev","ListItem","display","justifyContent","Text","fontWeight","HStack","gap","deleteContact","handleDelete","ContactList","filteredContacts","UnorderedList","flexDirection","mt","px","map","Filter","Container","m","Input","_placeholder","size","focusBorderColor","onChange","event","setFilter","target","value","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}