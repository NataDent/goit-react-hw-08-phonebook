{"version":3,"file":"static/js/975.b9c205de.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm.js","components/ContactList.js","components/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Form } from 'react-router-dom';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === newContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Box maxW=\"50%\" mx=\"auto\" p={5}>\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Create A Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleSubmit }) => (\n          <Form onSubmit={handleSubmit}>\n            <VStack autoComplete=\"true\" spacing={5} m=\"auto\" align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\" color=\"brand.900\">\n                  Name\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name:\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel htmlFor=\"phone\" color=\"brand.900\">\n                  Phone number\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"number\"\n                  name=\"number\"\n                  placeholder=\"Phone: 123-45-67\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </FormControl>\n              <Button\n                type=\"submit\"\n                variant=\"solid\"\n                bgColor=\"brand.100\"\n                _hover={{ bgColor: 'brand.700', color: '#fff' }}\n                mx=\"auto\"\n                color=\"brand.900\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","import { selectFilteredContacts } from 'redux/contacts/selectors';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport {\n  Heading,\n  UnorderedList,\n  ListItem,\n  Button,\n  Text,\n  ButtonGroup,\n  useDisclosure,\n} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const { onOpen } = useDisclosure();\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <UnorderedList\n      display=\"flex\"\n      flexDirection=\"column\"\n      mt={5}\n      px={5}\n      maxW=\"50%\"\n      mx=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Your Contacts\n      </Heading>\n\n      {filteredContacts.map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          p={1}\n          listStyle=\"none\"\n        >\n          <Text fontSize={18} fontWeight=\"bold\" color=\"brand.900\">\n            {name}: {number}\n          </Text>\n          <ButtonGroup gap=\"4\">\n            <Button\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              color=\"brand.900\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              type=\"button\"\n              onClick={onOpen}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              color=\"brand.900\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              type=\"button\"\n              onClick={() => handleDelete(id)}\n            >\n              Delete\n            </Button>\n          </ButtonGroup>\n        </ListItem>\n      ))}\n    </UnorderedList>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Container, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container p={5} maxW=\"50%\" m=\"auto\">\n      <Input\n        placeholder=\"Find contacts by name:\"\n        _placeholder={{ color: 'brand.300' }}\n        size=\"lg\"\n        variant=\"outline\"\n        focusBorderColor=\"brand.600\"\n        type=\"text\"\n        name=\"find\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </Container>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && <p fontSize={20}>Request in progress...</p>}\n      {contacts ? <ContactList /> : <p fontSize={20}>No contacts</p>}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","contactSchema","Yup","shape","min","required","number","max","matches","ContactForm","useSelector","dispatch","useDispatch","_jsxs","Box","maxW","mx","p","children","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","validationSchema","onSubmit","newContact","actions","existingName","find","existingNumber","alert","addContact","resetForm","_ref","handleSubmit","Form","VStack","autoComplete","spacing","m","align","FormControl","FormLabel","htmlFor","Field","as","Input","id","placeholder","_placeholder","size","variant","focusBorderColor","ErrorMessage","component","Button","type","bgColor","_hover","ContactList","onOpen","useDisclosure","filteredContacts","UnorderedList","display","flexDirection","mt","px","map","ListItem","justifyContent","listStyle","Text","fontWeight","ButtonGroup","gap","onClick","deleteContact","handleDelete","Filter","Container","onChange","event","setFilter","target","value","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}