{"version":3,"file":"static/js/417.b56db35f.chunk.js","mappings":"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","sources":["components/UpdateContact.js","pages/ContactDetails.js","redux/contacts/selectors.js"],"sourcesContent":["import { Field, Formik } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { updateContact } from 'redux/contacts/operations';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const UpdateContact = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (editedContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === editedContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === editedContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(updateContact(editedContact));\n    actions.resetForm();\n  };\n  return (\n    <Box maxW=\"50%\" mx=\"auto\">\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Update The Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: updateContact.name,\n          number: updateContact.number,\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ handleSubmit, errors }) => (\n          <form onSubmit={handleSubmit}>\n            <VStack autoComplete=\"true\" spacing={5} m=\"auto\" align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\" color=\"brand.900\">\n                  Name\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name:\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <FormErrorMessage>{errors.name}</FormErrorMessage>\n              </FormControl>\n\n              <FormControl>\n                <FormLabel htmlFor=\"phone\" color=\"brand.900\">\n                  Phone number\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"number\"\n                  name=\"number\"\n                  placeholder=\"Phone: 123-45-67\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <FormErrorMessage>{errors.number}</FormErrorMessage>\n              </FormControl>\n              <Button\n                type=\"submit\"\n                variant=\"solid\"\n                bgColor=\"brand.100\"\n                _hover={{ bgColor: 'brand.700', color: '#fff' }}\n                mx=\"auto\"\n                color=\"brand.900\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","import { UpdateContact } from 'components/UpdateContact';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/operations';\n\nconst ContactDetails = () => {\n  const dispatch = useDispatch();\n\n  useEffect(\n    id => {\n      dispatch(updateContact(id));\n    },\n    [dispatch]\n  );\n\n  return (\n    <>\n      <UpdateContact />\n    </>\n  );\n};\nexport default ContactDetails;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["contactSchema","Yup","shape","name","min","required","number","max","matches","UpdateContact","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsxs","Box","maxW","mx","children","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","updateContact","validationSchema","onSubmit","editedContact","actions","existingName","find","contact","existingNumber","alert","resetForm","_ref","handleSubmit","errors","VStack","autoComplete","spacing","m","align","FormControl","FormLabel","htmlFor","Field","as","Input","id","placeholder","_placeholder","size","variant","focusBorderColor","FormErrorMessage","Button","type","bgColor","_hover","useEffect","_Fragment","state","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","toLowerCase","includes"],"sourceRoot":""}