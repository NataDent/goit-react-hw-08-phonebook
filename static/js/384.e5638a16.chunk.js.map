{"version":3,"file":"static/js/384.e5638a16.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm.js","components/Modal.js","components/ContactList.js","components/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik, Field, ErrorMessage, Form } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === newContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Box maxW=\"50%\" mx=\"auto\" p={5}>\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Create A Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        {() => (\n          <Form>\n            <VStack autoComplete=\"true\" spacing={5} m=\"auto\" align=\"flex-start\">\n              <FormControl>\n                <FormLabel htmlFor=\"name\" color=\"brand.900\">\n                  Name\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Name:\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </FormControl>\n\n              <FormControl>\n                <FormLabel htmlFor=\"phone\" color=\"brand.900\">\n                  Phone number\n                </FormLabel>\n                <Field\n                  as={Input}\n                  id=\"number\"\n                  name=\"number\"\n                  placeholder=\"Phone: 123-45-67\"\n                  _placeholder={{ color: 'brand.300' }}\n                  size=\"lg\"\n                  variant=\"outline\"\n                  focusBorderColor=\"brand.600\"\n                />\n                <ErrorMessage component=\"div\" name=\"name\" />\n              </FormControl>\n              <Button\n                type=\"submit\"\n                variant=\"solid\"\n                bgColor=\"brand.100\"\n                _hover={{ bgColor: 'brand.700', color: '#fff' }}\n                mx=\"auto\"\n                color=\"brand.900\"\n              >\n                Add contact\n              </Button>\n            </VStack>\n          </Form>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n","import {\n  Button,\n  ButtonGroup,\n  FormControl,\n  FormLabel,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  VStack,\n} from '@chakra-ui/react';\nimport { ErrorMessage, Field, Formik, Form } from 'formik';\nimport React from 'react';\n\nimport { createPortal } from 'react-dom';\nimport * as Yup from 'yup';\nimport { updateContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n// import { selectContacts } from 'redux/contacts/selectors';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(10, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ModalWindow = ({ isOpen, name, number, onClose, id }) => {\n  //   const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (editedContact, actions) => {\n    // const existingName = contacts.find(\n    //   contact => contact.name === editedContact.name\n    // );\n    // const existingNumber = contacts.find(\n    //   contact => contact.number === editedContact.number\n    // );\n\n    // if (existingName) {\n    //   alert('Such name  already exists');\n    //   return;\n    // }\n    // if (existingNumber) {\n    //   alert('Such number already exists');\n    //   return;\n    // }\n    dispatch(\n      updateContact({ ...editedContact, id }).then(() => {\n        onClose();\n      })\n    );\n    actions.resetForm();\n  };\n\n  const initialRef = React.useRef(null);\n  const finalRef = React.useRef(null);\n\n  return createPortal(\n    <Modal\n      initialFocusRef={initialRef}\n      finalFocusRef={finalRef}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Update your contact</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody pb={6}>\n          <Formik\n            initialValues={{\n              name,\n              number,\n            }}\n            validationSchema={contactSchema}\n            onSubmit={handleSubmit}\n          >\n            {() => (\n              <Form>\n                <VStack\n                  autoComplete=\"true\"\n                  spacing={5}\n                  m=\"auto\"\n                  align=\"flex-start\"\n                >\n                  <FormControl>\n                    <FormLabel htmlFor=\"name\" color=\"brand.900\">\n                      Name\n                    </FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"name\"\n                      name=\"name\"\n                      placeholder=\"Name:\"\n                      _placeholder={{ color: 'brand.300' }}\n                      size=\"lg\"\n                      variant=\"outline\"\n                      focusBorderColor=\"brand.600\"\n                    />\n                    <ErrorMessage component=\"div\" name=\"name\" />\n                  </FormControl>\n\n                  <FormControl>\n                    <FormLabel htmlFor=\"phone\" color=\"brand.900\">\n                      Phone number\n                    </FormLabel>\n                    <Field\n                      as={Input}\n                      id=\"number\"\n                      name=\"number\"\n                      placeholder=\"Phone: 123-45-67\"\n                      _placeholder={{ color: 'brand.300' }}\n                      size=\"lg\"\n                      variant=\"outline\"\n                      focusBorderColor=\"brand.600\"\n                    />\n                    <ErrorMessage component=\"div\" name=\"name\" />\n                  </FormControl>\n                  {/* <Button\n                    type=\"submit\"\n                    variant=\"solid\"\n                    bgColor=\"brand.100\"\n                    _hover={{ bgColor: 'brand.700', color: '#fff' }}\n                    mx=\"auto\"\n                    color=\"brand.900\"\n                  >\n                    Update contact\n                  </Button> */}\n                </VStack>\n              </Form>\n            )}\n          </Formik>\n        </ModalBody>\n\n        <ModalFooter>\n          <ButtonGroup display=\"flex\">\n            <Button\n              onClose={() => {\n                onClose();\n              }}\n              type=\"submit\"\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              mx=\"auto\"\n              color=\"brand.900\"\n              mr={3}\n            >\n              Save\n            </Button>\n            <Button\n              onClick={() => {\n                onClose();\n              }}\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              mx=\"auto\"\n              color=\"brand.900\"\n              mr={3}\n            >\n              Cancel\n            </Button>\n          </ButtonGroup>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>,\n\n    modalRoot\n  );\n};\n","import { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  Heading,\n  UnorderedList,\n  ListItem,\n  Button,\n  Text,\n  useDisclosure,\n  HStack,\n} from '@chakra-ui/react';\nimport { ModalWindow } from './Modal';\n\nexport const ContactList = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <UnorderedList\n      display=\"flex\"\n      flexDirection=\"column\"\n      mt={5}\n      px={5}\n      maxW=\"50%\"\n      mx=\"auto\"\n    >\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Your Contacts\n      </Heading>\n\n      {filteredContacts.map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          p={1}\n          onClick={onOpen}\n        >\n          <Text fontSize={18} fontWeight=\"bold\" color=\"brand.900\">\n            {name}: {number}\n          </Text>\n          <HStack gap={1}>\n            <Button\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              color=\"brand.900\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              type=\"button\"\n              onClick={isOpen}\n            >\n              Edit\n            </Button>\n            <Button\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              color=\"brand.900\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              type=\"button\"\n              onClick={() => handleDelete(id)}\n            >\n              Delete\n            </Button>\n          </HStack>\n          {isOpen && (\n            <ModalWindow\n              isOpen={isOpen}\n              name={name}\n              number={number}\n              onClose={onClose}\n              id={id}\n            />\n          )}\n        </ListItem>\n      ))}\n    </UnorderedList>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Container, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container p={5} maxW=\"50%\" m=\"auto\">\n      <Input\n        placeholder=\"Find contacts by name:\"\n        _placeholder={{ color: 'brand.300' }}\n        size=\"lg\"\n        variant=\"outline\"\n        focusBorderColor=\"brand.600\"\n        type=\"text\"\n        name=\"find\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </Container>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && (\n        <b fontSize={20} color=\"brand.900\">\n          Request in progress...\n        </b>\n      )}\n      {contacts ? (\n        <ContactList />\n      ) : (\n        <b fontSize={20} color=\"brand.900\">\n          No contacts\n        </b>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","contactSchema","Yup","shape","min","required","number","max","matches","ContactForm","useSelector","dispatch","useDispatch","_jsxs","Box","maxW","mx","p","children","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","validationSchema","onSubmit","newContact","actions","existingName","find","existingNumber","alert","addContact","resetForm","Form","VStack","autoComplete","spacing","m","align","FormControl","FormLabel","htmlFor","Field","as","Input","id","placeholder","_placeholder","size","variant","focusBorderColor","ErrorMessage","component","Button","type","bgColor","_hover","modalRoot","document","querySelector","ModalWindow","_ref","isOpen","onClose","initialRef","React","finalRef","createPortal","Modal","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","pb","editedContact","updateContact","_objectSpread","then","ModalFooter","ButtonGroup","display","mr","onClick","ContactList","_useDisclosure","useDisclosure","onOpen","filteredContacts","UnorderedList","flexDirection","mt","px","map","ListItem","justifyContent","Text","fontWeight","HStack","gap","deleteContact","handleDelete","Filter","Container","onChange","event","setFilter","target","value","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}