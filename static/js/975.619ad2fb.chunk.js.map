{"version":3,"file":"static/js/975.619ad2fb.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm.js","components/ContactList.js","components/Filter.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik, Field } from 'formik';\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  Heading,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst contactSchema = Yup.object().shape({\n  name: Yup.string().min(2, 'Too short!').required('Required'),\n  number: Yup.string()\n    .min(9, 'Too Short!')\n    .max(9, 'Too long!')\n    .required('The field cannot be empty')\n    .matches(\n      /[0-9]{3}-[0-9]{2}-[0-9]{2}/,\n      'Number must be in the format XXX-XX-XX'\n    ),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (newContact, actions) => {\n    const existingName = contacts.find(\n      contact => contact.name === newContact.name\n    );\n    const existingNumber = contacts.find(\n      contact => contact.number === newContact.number\n    );\n\n    if (existingName) {\n      alert('Such name  already exists');\n      return;\n    }\n    if (existingNumber) {\n      alert('Such number already exists');\n      return;\n    }\n    dispatch(addContact(newContact));\n    actions.resetForm();\n  };\n\n  return (\n    <Box maxW=\"50%\" mx=\"auto\">\n      <Heading fontSize=\"3xl\" color=\"brand.600\" textAlign=\"center\" mb={5}>\n        Create A Contact\n      </Heading>\n\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={contactSchema}\n        onSubmit={handleSubmit}\n      >\n        <form onSubmit={handleSubmit}>\n          <VStack autoComplete=\"true\" spacing={5} m=\"auto\" align=\"flex-start\">\n            <FormControl>\n              <Field\n                as={Input}\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"Name:\"\n                _placeholder={{ color: 'brand.300' }}\n                size=\"lg\"\n                variant=\"outline\"\n                focusBorderColor=\"brand.600\"\n              />\n              <FormErrorMessage component=\"div\" name=\"name\" />\n            </FormControl>\n            <FormControl>\n              <Field\n                as={Input}\n                id=\"number\"\n                name=\"number\"\n                placeholder=\"Phone: 123-45-67\"\n                _placeholder={{ color: 'brand.300' }}\n                size=\"lg\"\n                variant=\"outline\"\n                focusBorderColor=\"brand.600\"\n              />\n              <FormErrorMessage component=\"div\" name=\"number\" />\n            </FormControl>\n            <Button\n              type=\"submit\"\n              variant=\"solid\"\n              bgColor=\"brand.100\"\n              _hover={{ bgColor: 'brand.700', color: '#fff' }}\n              mx=\"auto\"\n              color=\"brand.900\"\n            >\n              Add contact\n            </Button>\n          </VStack>\n        </form>\n      </Formik>\n    </Box>\n  );\n};\n","import { selectFilteredContacts } from 'redux/contacts/selectors';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Helmet } from 'react-helmet';\nimport {\n  Heading,\n  UnorderedList,\n  ListItem,\n  Button,\n  Text,\n} from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <UnorderedList display=\"flex\" flexDirection=\"column\" mt={5}>\n      <Helmet>\n        <Heading\n          fontSize=\"3xl\"\n          color=\"brand.600\"\n          textAlign=\"center\"\n          mb={5}\n          bgColor=\"#fff\"\n        >\n          Your contacts\n        </Heading>\n      </Helmet>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ListItem\n          key={id}\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          p={1}\n          listStyle=\"none\"\n        >\n          <Text>\n            {name}: {number}\n          </Text>\n          <Button\n            variant=\"solid\"\n            bgColor=\"brand.100\"\n            color=\"brand.900\"\n            _hover={{ bgColor: 'brand.700', color: '#fff' }}\n            type=\"button\"\n            onClick={() => handleDelete(id)}\n          >\n            Delete\n          </Button>\n        </ListItem>\n      ))}\n    </UnorderedList>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Container, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <Container p={5} maxW=\"50%\" m=\"auto\">\n      <Input\n        placeholder=\"Find contacts by name:\"\n        _placeholder={{ color: 'brand.300' }}\n        size=\"lg\"\n        variant=\"outline\"\n        focusBorderColor=\"brand.600\"\n        type=\"text\"\n        name=\"find\"\n        onChange={event => dispatch(setFilter(event.target.value))}\n      />\n    </Container>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n\n      <Filter />\n      {isLoading && !error && <p fontSize={20}>Request in progress...</p>}\n      {contacts ? <ContactList /> : <p fontSize={20}>No contacts</p>}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","contactSchema","Yup","shape","min","required","number","max","matches","ContactForm","useSelector","dispatch","useDispatch","handleSubmit","newContact","actions","existingName","find","existingNumber","alert","addContact","resetForm","_jsxs","Box","maxW","mx","children","_jsx","Heading","fontSize","color","textAlign","mb","Formik","initialValues","validationSchema","onSubmit","VStack","autoComplete","spacing","m","align","FormControl","Field","as","Input","id","placeholder","_placeholder","size","variant","focusBorderColor","FormErrorMessage","component","Button","type","bgColor","_hover","ContactList","filteredContacts","UnorderedList","display","flexDirection","mt","Helmet","map","_ref","ListItem","justifyContent","p","listStyle","Text","onClick","deleteContact","handleDelete","Filter","Container","onChange","event","setFilter","target","value","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}